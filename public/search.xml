<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>临时切换分支为什么使用stash</title>
      <link href="/2021/10/01/%E4%B8%B4%E6%97%B6%E5%88%87%E6%8D%A2%E5%88%86%E6%94%AF%E4%B8%BA%E4%BB%80%E4%B9%88%E4%BD%BF%E7%94%A8stash/"/>
      <url>/2021/10/01/%E4%B8%B4%E6%97%B6%E5%88%87%E6%8D%A2%E5%88%86%E6%94%AF%E4%B8%BA%E4%BB%80%E4%B9%88%E4%BD%BF%E7%94%A8stash/</url>
      
        <content type="html"><![CDATA[<p>最近博主在看廖雪峰的 <code>Git</code> 教程时，发现关于 Bug 分支中提到了一下场景：</p><blockquote><p>在软件开发过程中，出现 bug 时，通过 git 新建一个分支来修复 bug，修复后再将临时分支删除。但是如果此时 dev（用于开发的分支）分支上工作只做到一半，没法提交，此时可以通过* <em><code>stash</code></em> <em>命令将 dev 分支上的工作现场隐藏起来，等之后在进行恢复。</em></p></blockquote><p>此时博主有了疑问：明明新建了 <code>bug</code> 分支与其他分支隔开工作环境，为什么还要对 <code>dev</code> 分支上的工作环境隐藏起来？这就要验证一下 git 不同分支对不同时期的工作环境的”态度“。</p><span id="more"></span><h2 id="背景设定"><a href="#背景设定" class="headerlink" title="背景设定"></a>背景设定</h2><p>我们通常建立<code>master</code>分支用于发布新版本，同时建立<code>dev</code>分支用于平时干活，团队中的人大部分在此分支上工作，发布新版本就把<code>dev</code>合并到<code>master</code>上，此时我们发现 bug，就建立临时分支 bug-xxx。如图所示：</p><img src="/imgaes/gitbranch.png" alt="gitbranch" style="zoom:80%;" /><p>此时我们在 dev 的某个版本上需要修改 bug，就建立分支 bug-xxx，但是目前 dev 已经较上一次提交，进行了一部分工作，所以需要使用 stash 来隐藏这部分之后在进行新分支的操作。博主的问题就是在这部分：我们新建分支时是从上一次 dev 的提交节点（<code>图中dev分支最近一次提交节点</code>）分出，和已做的部分工作有什么关系？</p><h2 id="解决问题"><a href="#解决问题" class="headerlink" title="解决问题"></a>解决问题</h2><p>在经历一波尝试之后，重新学习了 git 追踪文件的逻辑。我们在本地建立一个 git 仓库，并创建<code>dev</code>分支，建立一个 REAME 文件，第一次提交后，再次对其修改（模拟工作做一部分，没有进行 add 和 commit），建立 <code>bug-xxx</code> 分支，并查看 <code>bug-xxx</code> 分支的 git 库状态。</p><figure class="highlight vala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">git status</span><br><span class="line"><span class="meta"># On branch bug-xxx</span></span><br><span class="line"><span class="meta">#  Changes not staged for commit:</span></span><br><span class="line"><span class="meta">#    (use &quot;git add &lt;file&gt;...&quot; to update what will be committed)</span></span><br><span class="line"><span class="meta">#    (use &quot;git checkout -- &lt;file&gt;...&quot; to discard changes in working directory)</span></span><br><span class="line"><span class="meta">#</span></span><br><span class="line"><span class="meta">#          modified:   README.md</span></span><br><span class="line"><span class="meta">#</span></span><br><span class="line"><span class="meta"># no changes added to commit (use &quot;git add&quot; and/or &quot;git commit -a&quot;)</span></span><br></pre></td></tr></table></figure><p>此时我们发现，<code>在bug-xxx分支也能看到dev分支操作的REAME文件（未commit）</code>，这是我们不愿意看到的，因为如果是修改代码，一定要用最近版本的代码进行修改，不能在他人修改过的代码上修改，防止 bug 更多。</p><blockquote><p>在了解过之后，发现在上述情况下，<code>dev</code>分支上修改或新建的文件<code>没有执行commit操作</code>（提交到版本库中），都会被其他分支查看到。</p></blockquote><p>之后就实验一下 stash 命令：</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git stash</span><br><span class="line"># Saved working directory <span class="built_in">and</span> <span class="built_in">index</span> state WIP <span class="keyword">on</span> de<span class="variable">v:</span> cabf4ea created README</span><br></pre></td></tr></table></figure><p>在 bug 分支查看库状态：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git status</span><br><span class="line"># <span class="keyword">On</span> branch bug-xxx</span><br><span class="line"># <span class="keyword">nothing</span> <span class="keyword">to</span> <span class="keyword">commit</span>, working tree clean</span><br></pre></td></tr></table></figure><p>发现执行成功，然后如果修复完 bug，执行<code>git stash pop</code>即可恢复现场</p><blockquote><p>建议在 pop 后，进行一次 commit 提交，</p></blockquote><h3 id="其他情况"><a href="#其他情况" class="headerlink" title="其他情况"></a>其他情况</h3><p>在执行<code>git stash</code>时，如果文件是新建的，并没有被<code>版本库</code>或者<code>暂存区</code>追踪，则无法进行隐藏：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 在dev分支下新建文件</span><br><span class="line">vim dev.<span class="keyword">log</span></span><br><span class="line"></span><br><span class="line">git stash</span><br><span class="line"># <span class="keyword">No</span> <span class="keyword">local</span> changes <span class="keyword">to</span> save</span><br></pre></td></tr></table></figure><p>发现并没有隐藏新建的文件，切换分支看一下：</p><figure class="highlight vala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">git checkout bug-xxx</span><br><span class="line">git status</span><br><span class="line"><span class="meta"># On branch bug-xxx</span></span><br><span class="line"><span class="meta"># Untracked files:</span></span><br><span class="line"><span class="meta">#   (use &quot;git add &lt;file&gt;...&quot; to include in what will be committed)</span></span><br><span class="line"><span class="meta">#</span></span><br><span class="line"><span class="meta">#         dev.log</span></span><br><span class="line"><span class="meta">#</span></span><br><span class="line"><span class="meta"># nothing added to commit but untracked files present (use &quot;git add&quot; to track)</span></span><br></pre></td></tr></table></figure><p>发现也没有隐藏成功，这样符合之前我们的结论：没有执行 commit 的文件会被其他分支看见，无论修改还是新建、添加到暂存区与否。</p><p>这种情况就需要先将新建的文件 add 到<code>暂存区</code>，再进行隐藏。</p><h3 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h3><p>当我们新建分支时，如果对最近一次提交进行操作了，在没做完的情况下，一定要 add 到<code>暂存区</code>后，使用 stash 将我们多做的部分隐藏，这样我们新建分支时，就不会有我们做的部分文件干扰。如果不建立新分支修复 bug，请参考<a href="https://www.liaoxuefeng.com/wiki/896043488029600/900388704535136">廖雪峰 Git 教程</a>，有问题可以参考教程下评论。</p>]]></content>
      
      
      <categories>
          
          <category> 疑难杂症 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>WSL2 安装nodejs</title>
      <link href="/2021/09/23/WSL2-%E5%AE%89%E8%A3%85nodejs/"/>
      <url>/2021/09/23/WSL2-%E5%AE%89%E8%A3%85nodejs/</url>
      
        <content type="html"><![CDATA[<p>在使用<code>hexo</code>创建博客的时候用到<code>nodejs</code>和<code>npm</code>，博主第一次接触 js 的管理工具，所以从头安装，在 win10 上使用的时候，除了配置环境变量之外，在使用<code>npm</code>时需要用管理员运行 pwsh，所以就转到 WSL 上，在搜索教程时，看到 WSL1 在安装 nodejs 时可能会有一些问题，如果你是 WSL1 并遇到问题，可以尝试升级到 WSL2。</p><blockquote><p>博主使用的是 ubuntu18.04LTS 版本的 WSL2</p></blockquote><span id="more"></span><h2 id="安装-nodejs"><a href="#安装-nodejs" class="headerlink" title="安装 nodejs"></a>安装 nodejs</h2><p>安装之前看网上说使用<code>nvm</code>管理 node，博主安装之后，仍有一些错误（可能与博主对前端的东西接触到过少），所以采用 ubuntu 存储库安装：</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt update</span><br><span class="line">sudo apt <span class="keyword">install</span> nodejs npm</span><br></pre></td></tr></table></figure><p><strong>注意</strong>：安装的是 nodejs，ubuntu 存储库中有软件包与 node 冲突。</p><p>查看安装结果：</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">nodejs <span class="comment">--version</span></span><br><span class="line"><span class="comment"># v14.17.6</span></span><br><span class="line">npm <span class="comment">--version</span></span><br><span class="line"><span class="comment"># 6.14.15</span></span><br></pre></td></tr></table></figure><p>如果版本低于博主版本，建议先升级：</p><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo npm install <span class="built_in">n</span> -g</span><br><span class="line">sudo <span class="built_in">n</span> stable</span><br></pre></td></tr></table></figure><h2 id="错误处理"><a href="#错误处理" class="headerlink" title="错误处理"></a>错误处理</h2><p>升级完成之后可以执行一下命令，验证一下是否有错误提示：</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm <span class="keyword">install</span> hexo -g</span><br></pre></td></tr></table></figure><p>如果报权限问题，按以下顺序进行设置，成功为止：</p><ol><li><p>设置 npm 的权限：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm<span class="built_in"> config </span><span class="builtin-name">set</span> <span class="attribute">unsafe-perm</span>=<span class="literal">true</span></span><br></pre></td></tr></table></figure></li><li><p>如果开启 vscode 的 Remote WSL，需要关闭 WSL，WSL2 可以在 pwsh 中执行：</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wsl <span class="comment">--shutdown</span></span><br></pre></td></tr></table></figure></li><li><p>修改 prefix 目录，更改 npm 的 global 仓库地址：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm<span class="built_in"> config </span><span class="builtin-name">set</span> <span class="attribute">prefix</span>=<span class="string">&quot;<span class="variable">$&#123;HOME&#125;</span>/npm-global&quot;</span></span><br></pre></td></tr></table></figure></li></ol><p>博主基本设置到这里就可以使用，但每个人的错误可能不一样，需要大家自行搜索解决，最后一步解决办法请参考：<a href="https://im.shellj.com/2020/05/wsl-npm-install-permission-denied-error.html">wsl npm install EACCES: permission denied 错误解决方法</a></p><h2 id="npm-加速"><a href="#npm-加速" class="headerlink" title="npm 加速"></a>npm 加速</h2><p>npm 在使用时，可能会出现速度过慢，博主在 WSL 上使用速度奇慢，但是在 ali 云上就是另一种体验，可能这就是金钱的力量。</p><p>1.运行以下命令设置淘宝镜像：</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm config set registry https:<span class="comment">//registry.npm.taobao.org</span></span><br></pre></td></tr></table></figure><p>之后正常使用 npm 即可，在搜索时发现有安装 cnpm 的办法，博主没有采用，大家可以自行尝试。</p><p>2.由于 WSL2 与 WSL1 不同，无法通过直接监听<code>本地</code>端口配置加速，需要先查看 win10 机器的 ip，具体流程如下（参考<a href="https://zhuanlan.zhihu.com/p/153124468">为 WSL2 一键设置代理</a>）：</p><ul><li><p>首先在 ss 等软件上开启允许本地 LAN 连接（端口号视使用的软件而定）</p>  <img src="/images/WSL2/lan.png" style="zoom:50%;" /></li><li><p>然后配置脚本将 win10 的 ip 配置到 WSL 的监听中，在 WSL 个人目录下创建<code>.proxyrc</code>。</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">host_ip=$(cat /etc/resolv.conf |grep <span class="string">&quot;nameserver&quot;</span> |cut -f 2 -d <span class="string">&quot; &quot;</span>)</span><br><span class="line"><span class="built_in">export</span> ALL_PROXY=<span class="string">&quot;http://<span class="variable">$host_ip</span>:7890&quot;</span></span><br></pre></td></tr></table></figure><ul><li>使用时只需要 <code>source .proxyrc</code> 生效脚本即可。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">source</span> .proxyrc</span><br></pre></td></tr></table></figure><ul><li>win10 的 ip 不变的情况下，也可以将<code>export ALL_PROXY=&quot;http://$host_ip:7890&quot;</code>配置为环境变量（个人目录的<code>.bashrc</code>），直接在 bash 启动时就监听加速端口（各位自行尝试）。</li></ul></br><blockquote><p>博客写的不多，如有错误请各位见谅，可以的话请联系我更正，谢谢！</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 日常挖坑 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> WSL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java中new一个对象的过程</title>
      <link href="/2021/09/20/JAVA-new%E4%B8%80%E4%B8%AA%E5%AF%B9%E8%B1%A1%E8%BF%87%E7%A8%8B/"/>
      <url>/2021/09/20/JAVA-new%E4%B8%80%E4%B8%AA%E5%AF%B9%E8%B1%A1%E8%BF%87%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<p>Java 在 new 一个对象前，会先查看对象所属类有没有被加载到 JVM 的方法区内（1.8 之后的元空间，下文不再提示）。如果没有，会加载和初始化该类，之后进行创建对象的工作。所以第一次使用某类时，会进行类<code>加载</code>，类<code>连接</code>（验证、准备、解析），<code>初始化</code>类，最后创建对象。</p><span id="more"></span><h2 id="一、类加载过程"><a href="#一、类加载过程" class="headerlink" title="一、类加载过程"></a>一、类加载过程</h2><p>由类加载器负责根据一个类的全限定名来读取此类的二进制字节流到 JVM 内部，并存储在运行时内存区的方法区，然后将其转换为一个与目标类型对应的 Java.lang.Class 对象实例</p><p>Java 使用<code>双亲委派模型</code>进行类加载，用来维护类的唯一性（JVM 在判定两个类是否相同时，不仅要判断两个类名是否相同，而且要判断是否由同一个类加载器实例加载的。只有两者同时满足的情况下，JVM 才认为这两个类是相同的）。</p><blockquote><p>双亲委派模型的工作过程是：当该类第一次使用时，该类的类加载器（ClassLoader）收到类加载请求，首先将这个请求交给父类加载器完成，每一个层次的类加载器都是如此，所以所有加载请求最后都是交给顶层的启动类加载器，只有当父类加载器无法完成这个加载请求时，子加载器会去尝试加载……总结：自底向上传递类加载请求，自上向下尝试加载类。</p></blockquote><p><img src="/images/classloader.png" alt="image-20200831225137263"></p><p>双亲委派模型的好处是：能够确保一个类的全局唯一性，如果没有此模型，我们可以随时使用自定义的类替代 Java 核心类，这样会有很大的安全隐患。</p><h2 id="二、类的连接过程"><a href="#二、类的连接过程" class="headerlink" title="二、类的连接过程"></a>二、类的连接过程</h2><h3 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h3><p>格式验证：验证是否符合 class 文件规范</p><p>语义验证：检查一个被标记为 final 的类型是否包含子类；检查一个类中的 final 方法是否被子类进行重写；确保父类和子类之间没有不兼容的一些方法声明（比如方法签名相同，但方法的返回值不同）</p><p>操作验证：在操作数栈中的数据必须进行正确的操作，对常量池中的各种符号引用执行验证（通常在解析阶段执行，检查是否可以通过符号引用中描述的全限定名定位到指定类型上，以及类成员信息的访问修饰符是否允许访问等）</p><h3 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h3><p>为类中的所有<code>静态变量</code>分配内存空间，并为其设置一个初始值。而被 final 修饰的 static 变量（常量）会直接赋值。</p><h3 id="解析"><a href="#解析" class="headerlink" title="解析"></a>解析</h3><p>将常量池中的符号引用转为直接引用（得到类或者字段、方法在内存中的指针或者偏移量，以便直接调用该方法），这个可以在初始化之后再执行。解析需要静态绑定的内容。所有不会被重写的方法和域都会被静态绑定</p><blockquote><p>符号引用：由字符串表示（JVM 运行时无法直接使用，因为没有关联内存空间），例如：“Java/io/PrintStream.println:(LJava/lang/String;)V”。里面有类的信息，方法名，方法参数等信息。。</p></blockquote><blockquote><p>直接引用：解析成直接引用就是将符号引用（字符串）解析成 JVM 在运行时直接使用的“数据”，例如虚方法表的下标，通过偏移量虚拟机可以直接在该类的内存区域中找到方法字节码的起始位置。</p></blockquote><h2 id="三、类的初始化"><a href="#三、类的初始化" class="headerlink" title="三、类的初始化"></a>三、类的初始化</h2><ul><li><p>为静态变量赋值</p></li><li><p>执行 static 代码块</p></li></ul><p><strong>注意</strong>：static 代码块只有 JVM 能够调用，如果是多线程需要同时初始化一个类，仅仅只能允许其中一个线程对其执行初始化操作，其余线程必须等待，只有在活动线程执行完对类的初始化操作之后，才会通知正在等待的其他线程。</p><p>因为子类存在对父类的依赖，所以类的加载顺序是先加载父类后加载子类，初始化也一样。不过父类初始化时，子类静态变量的值是默认值。</p><p>最终方法区会存储当前类类信息，包括类的静态变量、类初始化代码（定义静态变量时的赋值语句 和 静态初始化代码块、实例变量定义、实例初始化代码（定义实例变量时的赋值语句实例代码块和构造方法 ）和实例方法，还有父类的类信息引用。</p><h2 id="四、创建对象"><a href="#四、创建对象" class="headerlink" title="四、创建对象"></a>四、创建对象</h2><ol><li><p>在堆内存分配对象需要的内存空间</p><p>分配的内存空间包括本类和父类的所有实例变量，但不包括任何静态变量（1.8 之后静态变量和常量池都在堆中创建）</p></li><li><p>对所有实例变量赋默认值</p><p>将方法区内对实例变量的定义拷贝一份到堆区，然后赋默认值（_默认值是由 JVM 自动赋的，所以在单例模式 DCL 时要加 volatile_）</p></li><li><p>执行实例初始化代码</p><p>初始化顺序是先初始化父类再初始化子类，初始化时先执行实例代码块然后是构造方法</p></li><li><p>如果有类似于<code>Child c = new Child()</code>形式的引用，在栈区定义<code>Child</code>类型引用变量 <code>c</code>，然后将堆区对象的地址赋值给它</p><p><strong>需要注意</strong>：每个字类对象持有父类对象的引用，可通过 super 调用父类对象，但外部不可访问。</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
          <category> Java学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> JVM </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
